{"task_id": "JavaEval_1", "prompt": "Check if in the given list of doubles, there exist two elements such that their absolute difference is less than epsilon.\n\n```java\npublic class Solution {\n    public static boolean hasCloseElements(double[] numbers, double threshold) {\n        // Your code here\n    }\n}\n```", "canonical_solution": "import java.util.Arrays;\n\npublic class Solution {\n    public static boolean hasCloseElements(double[] numbers, double threshold) {\n        Arrays.sort(numbers);\n        for (int i = 1; i < numbers.length; i++) {\n            if (Math.abs(numbers[i] - numbers[i-1]) < threshold) return true;\n        }\n        return false;\n    }\n}", "test": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SolutionTest {\n    @Test\n    public void testHasCloseElements() {\n        assertTrue(Solution.hasCloseElements(new double[]{1.0, 2.0, 2.0001}, 0.01));\n        assertFalse(Solution.hasCloseElements(new double[]{1.0, 2.0, 3.0}, 0.5));\n    }\n}", "entry_point": "hasCloseElements"}
{"task_id": "JavaEval_2", "prompt": "Remove the fractional part of a double and return its integer part.\n\n```java\npublic class Solution {\n    public static int truncateNumber(double x) {\n        // Your code here\n    }\n}\n```", "canonical_solution": "public class Solution {\n    public static int truncateNumber(double x) {\n        return (int) x;\n    }\n}", "test": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SolutionTest {\n    @Test\n    public void testTruncateNumber() {\n        assertEquals(3, Solution.truncateNumber(3.9));\n        assertEquals(-2, Solution.truncateNumber(-2.7));\n    }\n}", "entry_point": "truncateNumber"}
{"task_id": "JavaEval_3", "prompt": "Find the largest divisor of a positive integer n (other than n itself).\n\n```java\npublic class Solution {\n    public static int largestDivisor(int n) {\n        // Your code here\n    }\n}\n```", "canonical_solution": "public class Solution {\n    public static int largestDivisor(int n) {\n        for (int i = n / 2; i >= 1; i--) {\n            if (n % i == 0) return i;\n        }\n        return 1;\n    }\n}", "test": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SolutionTest {\n    @Test\n    public void testLargestDivisor() {\n        assertEquals(5, Solution.largestDivisor(10));\n        assertEquals(3, Solution.largestDivisor(6));\n    }\n}", "entry_point": "largestDivisor"}
{"task_id": "JavaEval_4", "prompt": "Convert a positive integer n to a string in the given base b (2 ≤ b ≤ 36).\n\n```java\npublic class Solution {\n    public static String changeBase(int n, int b) {\n        // Your code here\n    }\n}\n```", "canonical_solution": "public class Solution {\n    public static String changeBase(int n, int b) {\n        return Integer.toString(n, b);\n    }\n}", "test": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SolutionTest {\n    @Test\n    public void testChangeBase() {\n        assertEquals(\"1010\", Solution.changeBase(10, 2));\n        assertEquals(\"a\", Solution.changeBase(10, 16));\n    }\n}", "entry_point": "changeBase"}
{"task_id": "JavaEval_5", "prompt": "Check if the given string is a palindrome.\n\n```java\npublic class Solution {\n    public static boolean isPalindrome(String s) {\n        // Your code here\n    }\n}\n```", "canonical_solution": "public class Solution {\n    public static boolean isPalindrome(String s) {\n        return s.equals(new StringBuilder(s).reverse().toString());\n    }\n}", "test": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SolutionTest {\n    @Test\n    public void testIsPalindrome() {\n        assertTrue(Solution.isPalindrome(\"racecar\"));\n        assertFalse(Solution.isPalindrome(\"hello\"));\n    }\n}", "entry_point": "isPalindrome"}
{"task_id": "JavaEval_6", "prompt": "Return n mod m where n and m are integers.\n\n```java\npublic class Solution {\n    public static int mod(int n, int m) {\n        // Your code here\n    }\n}\n```", "canonical_solution": "public class Solution {\n    public static int mod(int n, int m) {\n        return n % m;\n    }\n}", "test": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SolutionTest {\n    @Test\n    public void testMod() {\n        assertEquals(1, Solution.mod(10, 3));\n        assertEquals(0, Solution.mod(15, 5));\n    }\n}", "entry_point": "mod"}
{"task_id": "JavaEval_7", "prompt": "Return both the sum and product of two integers as an array of size 2.\n\n```java\npublic class Solution {\n    public static int[] sumProduct(int a, int b) {\n        // Your code here\n    }\n}\n```", "canonical_solution": "public class Solution {\n    public static int[] sumProduct(int a, int b) {\n        return new int[]{a + b, a * b};\n    }\n}", "test": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SolutionTest {\n    @Test\n    public void testSumProduct() {\n        assertArrayEquals(new int[]{7, 12}, Solution.sumProduct(3, 4));\n        assertArrayEquals(new int[]{0, 0}, Solution.sumProduct(0, 0));\n    }\n}", "entry_point": "sumProduct"}
{"task_id": "JavaEval_8", "prompt": "Return the digits of an integer as an array.\n\n```java\npublic class Solution {\n    public static int[] digits(int n) {\n        // Your code here\n    }\n}\n```", "canonical_solution": "import java.util.*;\n\npublic class Solution {\n    public static int[] digits(int n) {\n        String s = Integer.toString(Math.abs(n));\n        int[] result = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            result[i] = s.charAt(i) - '0';\n        }\n        return result;\n    }\n}", "test": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\nimport java.util.Arrays;\n\npublic class SolutionTest {\n    @Test\n    public void testDigits() {\n        assertArrayEquals(new int[]{1, 2, 3}, Solution.digits(123));\n        assertArrayEquals(new int[]{9, 8, 7}, Solution.digits(987));\n    }\n}", "entry_point": "digits"}
{"task_id": "JavaEval_9", "prompt": "Perform XOR between two binary strings of equal length and return the result as a binary string.\n\n```java\npublic class Solution {\n    public static String stringXor(String a, String b) {\n        // Your code here\n    }\n}\n```", "canonical_solution": "public class Solution {\n    public static String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i) == b.charAt(i) ? '0' : '1');\n        }\n        return sb.toString();\n    }\n}", "test": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SolutionTest {\n    @Test\n    public void testStringXor() {\n        assertEquals(\"0110\", Solution.stringXor(\"1010\", \"1100\"));\n        assertEquals(\"0000\", Solution.stringXor(\"1111\", \"1111\"));\n    }\n}", "entry_point": "stringXor"}
{"task_id": "JavaEval_10", "prompt": "Filter and return only the integers from an array of Objects.\n\n```java\npublic class Solution {\n    public static Integer[] filterIntegers(Object[] arr) {\n        // Your code here\n    }\n}\n```", "canonical_solution": "import java.util.*;\n\npublic class Solution {\n    public static Integer[] filterIntegers(Object[] arr) {\n        ArrayList<Integer> result = new ArrayList<>();\n        for (Object obj : arr) {\n            if (obj instanceof Integer) result.add((Integer) obj);\n        }\n        return result.toArray(new Integer[0]);\n    }\n}", "test": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SolutionTest {\n    @Test\n    public void testFilterIntegers() {\n        Object[] arr = {1, \"a\", 2, 3.5, 4};\n        assertArrayEquals(new Integer[]{1, 2, 4}, Solution.filterIntegers(arr));\n    }\n}", "entry_point": "filterIntegers"}
{"task_id": "JavaEval_11", "prompt": "Compute the nth Fibonacci number.\n\n```java\npublic class Solution {\n    public static int fib(int n) {\n        // Your code here\n    }\n}\n```", "canonical_solution": "public class Solution {\n    public static int fib(int n) {\n        if (n <= 1) return n;\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "test": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SolutionTest {\n    @Test\n    public void testFib() {\n        assertEquals(0, Solution.fib(0));\n        assertEquals(1, Solution.fib(1));\n        assertEquals(5, Solution.fib(5));\n        assertEquals(21, Solution.fib(8));\n    }\n}", "entry_point": "fib"}
{"task_id": "JavaEval_12", "prompt": "Count the number of vowels in a string.\n\n```java\npublic class Solution {\n    public static int countVowels(String s) {\n        // Your code here\n    }\n}\n```", "canonical_solution": "public class Solution {\n    public static int countVowels(String s) {\n        int count = 0;\n        for (char c : s.toLowerCase().toCharArray()) {\n            if (\"aeiou\".indexOf(c) >= 0) count++;\n        }\n        return count;\n    }\n}", "test": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SolutionTest {\n    @Test\n    public void testCountVowels() {\n        assertEquals(3, Solution.countVowels(\"hello world\"));\n        assertEquals(0, Solution.countVowels(\"rhythm\"));\n    }\n}", "entry_point": "countVowels"}
{"task_id": "JavaEval_13", "prompt": "Return true if an integer is prime, false otherwise.\n\n```java\npublic class Solution {\n    public static boolean isPrime(int n) {\n        // Your code here\n    }\n}\n```", "canonical_solution": "public class Solution {\n    public static boolean isPrime(int n) {\n        if (n <= 1) return false;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}", "test": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SolutionTest {\n    @Test\n    public void testIsPrime() {\n        assertTrue(Solution.isPrime(7));\n        assertFalse(Solution.isPrime(10));\n        assertFalse(Solution.isPrime(1));\n    }\n}", "entry_point": "isPrime"}
{"task_id": "JavaEval_14", "prompt": "Reverse the words in a string, separated by spaces.\n\n```java\npublic class Solution {\n    public static String reverseWords(String s) {\n        // Your code here\n    }\n}\n```", "canonical_solution": "public class Solution {\n    public static String reverseWords(String s) {\n        String[] parts = s.trim().split(\"\\\\s+\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = parts.length - 1; i >= 0; i--) {\n            sb.append(parts[i]);\n            if (i > 0) sb.append(\" \");\n        }\n        return sb.toString();\n    }\n}", "test": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SolutionTest {\n    @Test\n    public void testReverseWords() {\n        assertEquals(\"world hello\", Solution.reverseWords(\"hello world\"));\n        assertEquals(\"c b a\", Solution.reverseWords(\"a b c\"));\n    }\n}", "entry_point": "reverseWords"}
{"task_id": "JavaEval_15", "prompt": "Return the factorial of a non-negative integer n.\n\n```java\npublic class Solution {\n    public static long factorial(int n) {\n        // Your code here\n    }\n}\n```", "canonical_solution": "public class Solution {\n    public static long factorial(int n) {\n        long res = 1;\n        for (int i = 2; i <= n; i++) res *= i;\n        return res;\n    }\n}", "test": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SolutionTest {\n    @Test\n    public void testFactorial() {\n        assertEquals(120, Solution.factorial(5));\n        assertEquals(1, Solution.factorial(0));\n    }\n}", "entry_point": "factorial"}
{"task_id": "JavaEval_16", "prompt": "Return the maximum element in an integer array.\n\n```java\npublic class Solution {\n    public static int maxElement(int[] arr) {\n        // Your code here\n    }\n}\n```", "canonical_solution": "public class Solution {\n    public static int maxElement(int[] arr) {\n        int max = arr[0];\n        for (int x : arr) {\n            if (x > max) max = x;\n        }\n        return max;\n    }\n}", "test": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SolutionTest {\n    @Test\n    public void testMaxElement() {\n        assertEquals(9, Solution.maxElement(new int[]{1, 5, 9, 3}));\n        assertEquals(-1, Solution.maxElement(new int[]{-5, -1, -10}));\n    }\n}", "entry_point": "maxElement"}
{"task_id": "JavaEval_17", "prompt": "Compute the greatest common divisor (GCD) of two integers.\n\n```java\npublic class Solution {\n    public static int gcd(int a, int b) {\n        // Your code here\n    }\n}\n```", "canonical_solution": "public class Solution {\n    public static int gcd(int a, int b) {\n        while (b != 0) {\n            int t = b;\n            b = a % b;\n            a = t;\n        }\n        return Math.abs(a);\n    }\n}", "test": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SolutionTest {\n    @Test\n    public void testGcd() {\n        assertEquals(6, Solution.gcd(54, 24));\n        assertEquals(1, Solution.gcd(17, 31));\n    }\n}", "entry_point": "gcd"}
{"task_id": "JavaEval_18", "prompt": "Return the sum of digits of an integer.\n\n```java\npublic class Solution {\n    public static int sumDigits(int n) {\n        // Your code here\n    }\n}\n```", "canonical_solution": "public class Solution {\n    public static int sumDigits(int n) {\n        n = Math.abs(n);\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n}", "test": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SolutionTest {\n    @Test\n    public void testSumDigits() {\n        assertEquals(6, Solution.sumDigits(123));\n        assertEquals(1, Solution.sumDigits(1000));\n    }\n}", "entry_point": "sumDigits"}
{"task_id": "JavaEval_19", "prompt": "Return true if a string is an anagram of another string.\n\n```java\nimport java.util.*;\n\npublic class Solution {\n    public static boolean isAnagram(String a, String b) {\n        // Your code here\n    }\n}\n```", "canonical_solution": "import java.util.*;\n\npublic class Solution {\n    public static boolean isAnagram(String a, String b) {\n        char[] arr1 = a.toCharArray();\n        char[] arr2 = b.toCharArray();\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        return Arrays.equals(arr1, arr2);\n    }\n}", "test": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SolutionTest {\n    @Test\n    public void testIsAnagram() {\n        assertTrue(Solution.isAnagram(\"listen\", \"silent\"));\n        assertFalse(Solution.isAnagram(\"hello\", \"world\"));\n    }\n}", "entry_point": "isAnagram"}
{"task_id": "JavaEval_20", "prompt": "Return the first non-repeated character in a string, or null if every character repeats.\n\n```java\npublic class Solution {\n    public static Character firstNonRepeated(String s) {\n        // Your code here\n    }\n}\n```", "canonical_solution": "import java.util.*;\n\npublic class Solution {\n    public static Character firstNonRepeated(String s) {\n        Map<Character, Integer> freq = new LinkedHashMap<>();\n        for (char c : s.toCharArray()) {\n            freq.put(c, freq.getOrDefault(c, 0) + 1);\n        }\n        for (Map.Entry<Character, Integer> e : freq.entrySet()) {\n            if (e.getValue() == 1) return e.getKey();\n        }\n        return null;\n    }\n}", "test": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SolutionTest {\n    @Test\n    public void testFirstNonRepeated() {\n        assertEquals(Character.valueOf('w'), Solution.firstNonRepeated(\"swiss\"));\n        assertNull(Solution.firstNonRepeated(\"aabbcc\"));\n    }\n}", "entry_point": "firstNonRepeated"}
